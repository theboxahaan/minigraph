ToDos
-----
[-] Recreate the Rtree using a page level layout of the arch.
  [ ] Look at the internals of PostgreSQL to figure out how the data is actually stored
  [ ] Make a dummy parser if required for the "spatial" attributes of the the heap file.

[-] Implement the Architecture
  [-] Implement a basic `PropertyContainer`
    [x] Implement desctructors for the `PropertyContainer` class. All `Values` contained in
        the container are free'd on `Container` deletion
    [x] implement a memleak test for `PropertyContainer`
        - memleak test using `leaks -atExit -- ../test`
    [x] add ability to catch initialisation, insertion errors to `PropertyContainer`
    [x] shift PropertyContainer to using std::unique_ptr so that it's easier to manage destruction
        `get` should return references to the ptr but maintain ownership
    [x] make the `get` function generic so that it doesn't depend on RTTI 
        - FIXME had to get rid of `MullValue` returned when `get` fails. Possible solution
          is have it be derived from all SubTypes
    [x] see how to incorporate the `NullValue` type into generic `get`
  [ ] `PropertyPrinter` refactor to a *Visitor* pattern to get rid of the switch stmt.
      - only if I see more switch stmts
  [ ] write a profiling macro for getting time information of different functions. Adding 
      properties seems to be pretty slow as of now 
  [ ] Implement the `Node` class 
  [ ] consider using std::variant because we might have a closed inheritance hierarchy
  [ ] cache friendly code ?

[ ] Implement the Node class architecture - will need to look at R* trees for that
    make it modular so that other indexing methods can be implemented as well.

Ideas
-----
1. Is a `NullType` even required? Removing it might get rid of code branches
2. Look at using faster hashmaps like the robin_hood::unordered_map
3. Is creating the Rtree index performance critical
